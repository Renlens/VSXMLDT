<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InitializationFile</name>
    </assembly>
    <members>
        <member name="T:SInitializationFile.InitializationFile">
            <summary>
            提供对配置设置文件(.ini)的创建、读取、写入等操作的静态方法。
            </summary>
        </member>
        <member name="P:SInitializationFile.InitializationFile.Encode">
            <summary>
            指示要用何种编码进行存取。
            </summary>
        </member>
        <member name="M:SInitializationFile.InitializationFile.Create(System.String)">
            <summary>
            创建一个新文件。当路径不存在时，自动创建路径。当文件已经存在时，不执行任何操作。
            </summary>
            <param name="path">文件的路径。可以是相对路径。</param>
        </member>
        <member name="M:SInitializationFile.InitializationFile.Exists(System.String)">
            <summary>
            确定一个文件是否存在。其效果等同于 <see cref="M:System.IO.File.Exists(System.String)"/> 。
            </summary>
            <param name="path">文件的路径。可以是相对路径。</param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFile.Delete(System.String)">
            <summary>
            删除指定的文件。其效果等同于 <see cref="M:System.IO.File.Delete(System.String)"/> 。
            </summary>
            <param name="path">文件的路径。可以是相对路径。</param>
        </member>
        <member name="M:SInitializationFile.InitializationFile.ExistsNode(System.String,System.String)">
            <summary>
            确定指定的节点是否存在。
            </summary>
            <param name="path">文件的路径。可以是相对路径。</param>
            <param name="nodename">节点的名称</param>
            <returns>sadasd</returns>
        </member>
        <member name="M:SInitializationFile.InitializationFile.ExistsNode(System.IO.Stream,System.String)">
            <summary>
            确定指定的节点是否存在。
            </summary>
            <param name="stream">配置文件流</param>
            <param name="nodename">节点的名称</param>
            <returns>sadasd</returns>
        </member>
        <member name="M:SInitializationFile.InitializationFile.ExistsKey(System.String,System.String,System.String)">
            <summary>
            确定指定的键是否存在。
            </summary>
            <param name="path">文件的路径。可以是相对路径。</param>
            <param name="nodename">节点的名称</param>
            <param name="keyname">键的名称</param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFile.ExistsKey(System.IO.Stream,System.String,System.String)">
            <summary>
            确定指定的键是否存在。
            </summary>
            <param name="stream">配置文件流</param>
            <param name="nodename">节点的名称</param>
            <param name="keyname">键的名称</param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFile.GetNode(System.String)">
            <summary>
            获取所有节点的名称。
            </summary>
            <param name="path">文件的路径。可以是相对路径。</param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFile.GetNode(System.IO.Stream)">
            <summary>
            获取所有节点的名称。
            </summary>
            <param name="stream">配置文件流</param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFile.GetKey(System.String)">
            <summary>
            获取所有键的名称。
            </summary>
            <param name="path">文件的路径。可以是相对路径。</param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFile.GetKey(System.IO.Stream)">
            <summary>
            获取所有键的名称。
            </summary>
            <param name="stream">配置文件流</param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFile.GetKey(System.String,System.String)">
            <summary>
            获取指定节点中所有键的名称。
            </summary>
            <param name="path">文件的路径。可以是相对路径。</param>
            <param name="nodename">节点的名称</param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFile.GetKey(System.IO.Stream,System.String)">
            <summary>
            获取指定节点中所有键的名称。
            </summary>
            <param name="stream">配置文件流</param>
            <param name="nodename">节点的名称</param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFile.GetKeyValue(System.String,System.String,System.String,System.String)">
            <summary>
            获取指定键的值。如果节点或键不存在，则返回指定的默认值。
            </summary>
            <param name="path">文件的路径。可以是相对路径。</param>
            <param name="nodename">节点的名称</param>
            <param name="keyname">键的名称</param>
            <param name="defaultvalue">当节点或键不存在时返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFile.GetKeyValue(System.IO.Stream,System.String,System.String,System.String)">
            <summary>
            获取指定键的值。如果节点或键不存在，则返回指定的默认值。
            </summary>
            <param name="stream">配置文件流</param>
            <param name="nodename">节点的名称</param>
            <param name="keyname">键的名称</param>
            <param name="defaultvalue">当节点或键不存在时返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFile.RenameNode(System.String,System.String,System.String)">
            <summary>
            节点重命名。节点不存在时不执行任何操作，节点名称重复时会引发异常。
            </summary>
            <param name="path">文件的路径。可以是相对路径。</param>
            <param name="nodename">节点的名称</param>
            <param name="newnodename">节点的新名称</param>
        </member>
        <member name="M:SInitializationFile.InitializationFile.RenameNode(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            键名重命名。节点或键不存在时不执行任何操作，键名称重复时会引发异常。
            </summary>
            <param name="path">文件的路径。可以是相对路径。</param>
            <param name="nodename">节点的名称</param>
            <param name="keyname">键的名称</param>
            <param name="newkeyname">键的新名称</param>
            <param name="isimmediately">是否在找到后直接重命名。这会导致可能会有重名的键值，出现重名的键值读取键值时只会返回第一个键的值。如果在找到键值前发现了新键值，依然会引发异常。</param>
        </member>
        <member name="M:SInitializationFile.InitializationFile.SetKeyValue(System.String,System.String,System.String,System.String)">
            <summary>
            设置指定键的值。如果该键已存在，则会覆盖键的值。如果节点不存在，则会在文件尾创建该节点。
            </summary>
            <param name="path">文件的路径。可以是相对路径。</param>
            <param name="nodename">节点的名称</param>
            <param name="keyname">键的名称</param>
            <param name="value">键的值</param>
        </member>
        <member name="M:SInitializationFile.InitializationFile.Remove(System.String)">
            <summary>
            移除指定文件内的所有内容。
            </summary>
            <param name="path">文件的路径。可以是相对路径。</param>
        </member>
        <member name="M:SInitializationFile.InitializationFile.Remove(System.String,System.String)">
            <summary>
            移除指定节点。包括节点下的所有键。
            </summary>
            <param name="path">文件的路径。可以是相对路径。</param>
            <param name="nodename">节点的名称</param>
        </member>
        <member name="M:SInitializationFile.InitializationFile.Remove(System.String,System.String,System.String)">
            <summary>
            移除指定键。
            </summary>
            <param name="path">文件的路径。可以是相对路径。</param>
            <param name="nodename">节点的名称</param>
            <param name="keyname">键的名称</param>
        </member>
        <member name="T:SInitializationFile.InitializationInfo">
            <summary>
            提供对配置设置文件(.ini)的创建、读取、写入等操作的实例方法。
            </summary>
        </member>
        <member name="P:SInitializationFile.InitializationInfo.Encoding">
            <summary>
            不使用编码参数时打开文件所使用的编码
            </summary>
        </member>
        <member name="P:SInitializationFile.InitializationInfo.OpenEncoding">
            <summary>
            获取创建实例时使用的编码。
            </summary>
        </member>
        <member name="P:SInitializationFile.InitializationInfo.Name">
            <summary>
            获取文件名。包含扩展名。
            </summary>
        </member>
        <member name="P:SInitializationFile.InitializationInfo.Length">
            <summary>
            获取当前文件的大小(以字节为单位)。
            </summary>
        </member>
        <member name="P:SInitializationFile.InitializationInfo.Exists">
            <summary>
            获取文件是否存在的值。
            </summary>
        </member>
        <member name="M:SInitializationFile.InitializationInfo.Delete">
            <summary>
            从磁盘中删除该文件。
            </summary>
        </member>
        <member name="M:SInitializationFile.InitializationInfo.Close">
            <summary>
            关闭该文件
            </summary>
        </member>
        <member name="M:SInitializationFile.InitializationInfo.Dispose">
            <summary>
            释放该对象使用的所有资源
            </summary>
        </member>
        <member name="T:SInitializationFile.InitializationFileNodeList">
            <summary>
             <see cref="T:SInitializationFile.InitializationFileInfo"/> 的节点列表类型。为 <see cref="P:SInitializationFile.InitializationFileInfo.Nodes"/> 提供类型。
            </summary>    
        </member>
        <member name="P:SInitializationFile.InitializationFileNodeList.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的节点。
            </summary>
            <param name="index">从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="P:SInitializationFile.InitializationFileNodeList.Item(System.String)">
            <summary>
            获取或设置指定名称的节点。若设置新节点，则删除原节点，新节点的索引与原节点相同。
            </summary>
            <param name="name">节点的名称</param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFileNodeList.Add(SInitializationFile.InitializationFileNode)">
            <summary>
            将一个 <see cref="T:SInitializationFile.InitializationFileNode"/> 节点添加到列表的结尾处。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SInitializationFile.InitializationFileNodeList.AddRange(System.Collections.Generic.IEnumerable{SInitializationFile.InitializationFileNode})">
            <summary>
            将一组 <see cref="T:SInitializationFile.InitializationFileNode"/> 节点添加到列表的结尾处。
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:SInitializationFile.InitializationFileDictionary">
            <summary>
             <see cref="T:SInitializationFile.InitializationFileInfo"/> 的键值对列表类型。为 <see cref="P:SInitializationFile.InitializationFileNode.Dictionary"/> 提供类型。
            </summary>    
        </member>
        <member name="M:SInitializationFile.InitializationFileDictionary.Add(System.String,System.String)">
            <summary>
            将指定的键和值添加到列表中。添加时，将清除键的首尾空格符和值的尾部空格符。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:SInitializationFile._InitializationFileDictionary">
            <summary>
            为 <see cref="T:SInitializationFile.InitializationFileDictionary"/> 提供扩展方法。
            </summary>
        </member>
        <member name="M:SInitializationFile._InitializationFileDictionary.ToDictionary(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            从 <see cref="T:System.Collections.Generic.Dictionary`2"/> 创建一个 <see cref="T:SInitializationFile.InitializationFileDictionary"/> 集合。
            <para>其中 : TKey 是 <see cref="T:System.String"/> ; TValue 是 <see cref="T:System.String"/> 。</para> 
            </summary>
            <param name="data">要转换的 <see cref="T:System.Collections.Generic.Dictionary`2"/> </param>
            <returns></returns>
        </member>
        <member name="T:SInitializationFile.InitializationFileInfo">
            <summary>
            提供对配置设置文件(.ini)的创建、读取、写入等操作的实例方法。并帮助整理文件格式。
            <para>该类已经不推荐使用，请考虑改用 <see cref="T:SInitializationFile.InitializationInfo"/> </para>
            </summary>
        </member>
        <member name="P:SInitializationFile.InitializationFileInfo.Encoding">
            <summary>
            不使用编码参数时打开文件所使用的编码
            </summary>
        </member>
        <member name="P:SInitializationFile.InitializationFileInfo.OpenEncoding">
            <summary>
            获取创建实例时使用的编码。
            </summary>
        </member>
        <member name="P:SInitializationFile.InitializationFileInfo.Name">
            <summary>
            获取文件名。包含扩展名。
            </summary>
        </member>
        <member name="P:SInitializationFile.InitializationFileInfo.Length">
            <summary>
            获取当前文件的大小(以字节为单位)。
            </summary>
        </member>
        <member name="P:SInitializationFile.InitializationFileInfo.Exists">
            <summary>
            获取文件是否存在的值。
            </summary>
        </member>
        <member name="M:SInitializationFile.InitializationFileInfo.Delete">
            <summary>
            从磁盘中删除该文件。
            </summary>
        </member>
        <member name="P:SInitializationFile.InitializationFileInfo.Nodes">
            <summary>
            该配置文件中所包含的节点列表。
            </summary>
        </member>
        <member name="M:SInitializationFile.InitializationFileInfo.GetNodeNames">
            <summary>
            获取所有节点的名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFileInfo.GetKeyNames(System.String)">
            <summary>
            获取指定节点中所有键的名称。
            </summary>
            <param name="nodename"></param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFileInfo.GetKeyValue(System.String,System.String,System.String)">
            <summary>
            获取指定键的值。如果指定的节点或键不存在，则返回指定的默认值。
            </summary>
            <param name="nodename">节点的名称</param>
            <param name="keyname">键的名称</param>
            <param name="defaultvalue">指定的默认值</param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFileInfo.SetKeyValue(System.String,System.String,System.String)">
            <summary>
            设置指定键的值。
            </summary>
            <param name="nodename"></param>
            <param name="keyname"></param>
            <param name="value"></param>
        </member>
        <member name="M:SInitializationFile.InitializationFileInfo.ExistsNode(System.String)">
            <summary>
            确定文件内是否包含指定名称的节点。
            </summary>
            <param name="nodename">节点的名称</param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFileInfo.ExistsKey(System.String,System.String)">
            <summary>
            确定指定节点内是否包含指定名称的键。
            </summary>
            <param name="nodename">节点的名称</param>
            <param name="keyname">键的名称</param>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFileInfo.#ctor(System.String)">
            <summary>
            从磁盘中的一个文件创建一个 <see cref="T:SInitializationFile.InitializationFileInfo"/> 实例。使用 <see cref="P:SInitializationFile.InitializationFileInfo.Encoding"/> 编码打开文件。如果文件不存在，自动创建文件及路径。
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:SInitializationFile.InitializationFileInfo.#ctor(System.String,System.Text.Encoding)">
            <summary>
            从磁盘中的一个文件创建一个 <see cref="T:SInitializationFile.InitializationFileInfo"/> 实例。使用指定的编码打开文件。如果文件不存在，自动创建文件及路径。
            </summary>
            <param name="path">文件路径</param>
            <param name="encoding">打开文件时使用的编码</param>
        </member>
        <member name="M:SInitializationFile.InitializationFileInfo.Save">
            <summary>
            保存文件。使用打开文件时使用的编码保存并覆盖原文件。
            </summary>
        </member>
        <member name="M:SInitializationFile.InitializationFileInfo.Save(System.Text.Encoding)">
            <summary>
            使用指定的编码重新保存文件。文件保存在原位置。
            </summary>
            <param name="encoding">保存文件时使用的编码。</param>
        </member>
        <member name="M:SInitializationFile.InitializationFileInfo.Save(System.String)">
            <summary>
            将文件输出到指定位置。使用打开文件时使用的编码创建文件。
            </summary>
            <param name="path">保存文件的位置</param>
        </member>
        <member name="M:SInitializationFile.InitializationFileInfo.Save(System.String,System.Text.Encoding)">
            <summary>
            使用指定的编码将文件输出到指定位置。
            </summary>
            <param name="path">保存文件的位置</param>
            <param name="encoding">保存文件时使用的编码</param>
        </member>
        <member name="M:SInitializationFile.InitializationFileInfo.Create(System.String)">
            <summary>
            创建一个新节点添加到节点列表，并返回创建的节点。
            </summary>
            <param name="name">节点的名称</param>
            <returns></returns>
        </member>
        <member name="T:SInitializationFile.InitializationFileNode">
            <summary>
            表示一个 <see cref="T:SInitializationFile.InitializationFileInfo"/> 的节点。
            </summary>
        </member>
        <member name="P:SInitializationFile.InitializationFileNode.Name">
            <summary>
            获取或设置当前节点的名称。
            </summary>
        </member>
        <member name="P:SInitializationFile.InitializationFileNode.Parent">
            <summary>
            获取此节点所属的 <see cref="T:SInitializationFile.InitializationFileInfo"/> 。
            </summary>
        </member>
        <member name="P:SInitializationFile.InitializationFileNode.Dictionary">
            <summary>
            获取此节点所包含的键值对集合。
            </summary>
        </member>
        <member name="M:SInitializationFile.InitializationFileNode.#ctor(System.String)">
            <summary>
            创建一个具有指定名称的空的新节点。
            </summary>
            <param name="name">新节点的名称</param>
        </member>
        <member name="M:SInitializationFile.InitializationFileNode.OrderBy``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.String},``0})">
            <summary>
            根据某个键按升序对列表中元素进行排序。
            </summary>
            <typeparam name="Tkey">返回的键的类型</typeparam>
            <param name="func">从键值对中获取进行排序的键的函数</param>
        </member>
        <member name="M:SInitializationFile.InitializationFileNode.OrderByDescending``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.String},``0})">
            <summary>
            根据某个键按降序对列表中元素进行排序。
            </summary>
            <typeparam name="Tkey">要排序的键</typeparam>
            <param name="func">从项中获取排序键的函数</param>
        </member>
        <member name="M:SInitializationFile.InitializationFileNode.ToString">
            <summary>
            将此实例转换为字符串。其结果为该节点的名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFileNode.ToStringLength">
            <summary>
            将此实例的值转换为等效的字符串表现形式。
            </summary>
            <returns></returns>
        </member>
        <member name="M:SInitializationFile.InitializationFileNode.Copy(System.String)">
            <summary>
            从当前对象创建一个新 <see cref="T:SInitializationFile.InitializationFileNode"/> 对象。
            </summary>
            <param name="newname">新对象的名称</param>
            <returns></returns>
        </member>
    </members>
</doc>
